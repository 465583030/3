package ptx

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/barnex/cuda5/cu"
	"sync"
	"unsafe"
)

// pointers passed to CGO must be kept alive manually
// so we keep then here.
var (
	kernmulRSymm2Dyz_lock       sync.Mutex
	kernmulRSymm2Dyz_code       cu.Function
	kernmulRSymm2Dyz_stream     cu.Stream
	kernmulRSymm2Dyz_arg_fftMy  cu.DevicePtr
	kernmulRSymm2Dyz_arg_fftMz  cu.DevicePtr
	kernmulRSymm2Dyz_arg_fftKyy cu.DevicePtr
	kernmulRSymm2Dyz_arg_fftKzz cu.DevicePtr
	kernmulRSymm2Dyz_arg_fftKyz cu.DevicePtr
	kernmulRSymm2Dyz_arg_N1     int
	kernmulRSymm2Dyz_arg_N2     int

	kernmulRSymm2Dyz_argptr = [...]unsafe.Pointer{
		unsafe.Pointer(&kernmulRSymm2Dyz_arg_fftMy),
		unsafe.Pointer(&kernmulRSymm2Dyz_arg_fftMz),
		unsafe.Pointer(&kernmulRSymm2Dyz_arg_fftKyy),
		unsafe.Pointer(&kernmulRSymm2Dyz_arg_fftKzz),
		unsafe.Pointer(&kernmulRSymm2Dyz_arg_fftKyz),
		unsafe.Pointer(&kernmulRSymm2Dyz_arg_N1),
		unsafe.Pointer(&kernmulRSymm2Dyz_arg_N2)}
)

// CUDA kernel wrapper for kernmulRSymm2Dyz.
// The kernel is launched in a separate stream so that it can be parallel with memcpys etc.
// The stream is synchronized before this call returns.
func K_kernmulRSymm2Dyz(fftMy cu.DevicePtr, fftMz cu.DevicePtr, fftKyy cu.DevicePtr, fftKzz cu.DevicePtr, fftKyz cu.DevicePtr, N1 int, N2 int, gridDim, blockDim cu.Dim3) {
	kernmulRSymm2Dyz_lock.Lock()

	if kernmulRSymm2Dyz_stream == 0 {
		kernmulRSymm2Dyz_stream = cu.StreamCreate()
		//core.Log("Loading PTX code for kernmulRSymm2Dyz")
		kernmulRSymm2Dyz_code = cu.ModuleLoadData(kernmulRSymm2Dyz_ptx).GetFunction("kernmulRSymm2Dyz")
	}

	kernmulRSymm2Dyz_arg_fftMy = fftMy
	kernmulRSymm2Dyz_arg_fftMz = fftMz
	kernmulRSymm2Dyz_arg_fftKyy = fftKyy
	kernmulRSymm2Dyz_arg_fftKzz = fftKzz
	kernmulRSymm2Dyz_arg_fftKyz = fftKyz
	kernmulRSymm2Dyz_arg_N1 = N1
	kernmulRSymm2Dyz_arg_N2 = N2

	args := kernmulRSymm2Dyz_argptr[:]
	cu.LaunchKernel(kernmulRSymm2Dyz_code, gridDim.X, gridDim.Y, gridDim.Z, blockDim.X, blockDim.Y, blockDim.Z, 0, kernmulRSymm2Dyz_stream, args)
	kernmulRSymm2Dyz_stream.Synchronize()
	kernmulRSymm2Dyz_lock.Unlock()
}

const kernmulRSymm2Dyz_ptx = `
.version 3.1
.target sm_30
.address_size 64


.visible .entry kernmulRSymm2Dyz(
	.param .u64 kernmulRSymm2Dyz_param_0,
	.param .u64 kernmulRSymm2Dyz_param_1,
	.param .u64 kernmulRSymm2Dyz_param_2,
	.param .u64 kernmulRSymm2Dyz_param_3,
	.param .u64 kernmulRSymm2Dyz_param_4,
	.param .u32 kernmulRSymm2Dyz_param_5,
	.param .u32 kernmulRSymm2Dyz_param_6
)
{
	.reg .pred 	%p<5>;
	.reg .s32 	%r<34>;
	.reg .f32 	%f<20>;
	.reg .s64 	%rd<24>;


	ld.param.u64 	%rd6, [kernmulRSymm2Dyz_param_0];
	ld.param.u64 	%rd7, [kernmulRSymm2Dyz_param_1];
	ld.param.u64 	%rd8, [kernmulRSymm2Dyz_param_2];
	ld.param.u64 	%rd9, [kernmulRSymm2Dyz_param_3];
	ld.param.u64 	%rd10, [kernmulRSymm2Dyz_param_4];
	ld.param.u32 	%r6, [kernmulRSymm2Dyz_param_5];
	ld.param.u32 	%r7, [kernmulRSymm2Dyz_param_6];
	cvta.to.global.u64 	%rd1, %rd7;
	cvta.to.global.u64 	%rd2, %rd6;
	cvta.to.global.u64 	%rd3, %rd10;
	cvta.to.global.u64 	%rd4, %rd9;
	cvta.to.global.u64 	%rd5, %rd8;
	.loc 2 29 1
	mov.u32 	%r8, %ntid.y;
	mov.u32 	%r9, %ctaid.y;
	mov.u32 	%r10, %tid.y;
	mad.lo.s32 	%r1, %r8, %r9, %r10;
	.loc 2 30 1
	mov.u32 	%r11, %ntid.x;
	mov.u32 	%r12, %ctaid.x;
	mov.u32 	%r13, %tid.x;
	mad.lo.s32 	%r2, %r11, %r12, %r13;
	.loc 2 32 1
	setp.ge.s32 	%p1, %r2, %r7;
	setp.ge.s32 	%p2, %r1, %r6;
	or.pred  	%p3, %p1, %p2;
	@%p3 bra 	BB0_5;

	.loc 2 36 1
	mad.lo.s32 	%r3, %r1, %r7, %r2;
	.loc 2 37 1
	sub.s32 	%r14, %r6, %r1;
	mad.lo.s32 	%r4, %r14, %r7, %r2;
	.loc 2 43 1
	shr.u32 	%r15, %r6, 31;
	add.s32 	%r16, %r6, %r15;
	shr.s32 	%r17, %r16, 1;
	add.s32 	%r18, %r17, 1;
	setp.lt.s32 	%p4, %r1, %r18;
	@%p4 bra 	BB0_3;

	.loc 2 50 1
	mul.wide.s32 	%rd11, %r4, 4;
	add.s64 	%rd12, %rd3, %rd11;
	ld.global.f32 	%f4, [%rd12];
	neg.f32 	%f19, %f4;
	mov.u32 	%r33, %r4;
	bra.uni 	BB0_4;

BB0_3:
	.loc 2 46 1
	mul.wide.s32 	%rd13, %r3, 4;
	add.s64 	%rd14, %rd3, %rd13;
	ld.global.f32 	%f19, [%rd14];
	mov.u32 	%r33, %r3;

BB0_4:
	.loc 2 53 1
	mov.u32 	%r5, %r33;
	.loc 2 45 1
	mul.wide.s32 	%rd15, %r5, 4;
	add.s64 	%rd16, %rd4, %rd15;
	.loc 2 44 1
	add.s64 	%rd17, %rd5, %rd15;
	.loc 2 53 1
	ld.global.f32 	%f5, [%rd16];
	shl.b32 	%r22, %r3, 1;
	.loc 2 55 1
	mul.wide.s32 	%rd18, %r22, 4;
	add.s64 	%rd19, %rd2, %rd18;
	.loc 2 56 1
	add.s32 	%r23, %r22, 1;
	mul.wide.s32 	%rd20, %r23, 4;
	add.s64 	%rd21, %rd2, %rd20;
	ld.global.f32 	%f6, [%rd21];
	.loc 2 57 1
	add.s64 	%rd22, %rd1, %rd18;
	.loc 2 58 1
	add.s64 	%rd23, %rd1, %rd20;
	ld.global.f32 	%f7, [%rd23];
	.loc 2 55 1
	ld.global.f32 	%f8, [%rd19];
	.loc 2 53 1
	ld.global.f32 	%f9, [%rd17];
	.loc 2 57 1
	ld.global.f32 	%f10, [%rd22];
	.loc 2 60 1
	mul.f32 	%f11, %f10, %f19;
	fma.rn.f32 	%f12, %f8, %f9, %f11;
	st.global.f32 	[%rd19], %f12;
	.loc 2 61 1
	mul.f32 	%f13, %f7, %f19;
	fma.rn.f32 	%f14, %f6, %f9, %f13;
	st.global.f32 	[%rd21], %f14;
	.loc 2 62 1
	mul.f32 	%f15, %f10, %f5;
	fma.rn.f32 	%f16, %f8, %f19, %f15;
	st.global.f32 	[%rd22], %f16;
	.loc 2 63 1
	mul.f32 	%f17, %f7, %f5;
	fma.rn.f32 	%f18, %f6, %f19, %f17;
	st.global.f32 	[%rd23], %f18;

BB0_5:
	.loc 2 64 2
	ret;
}


`
