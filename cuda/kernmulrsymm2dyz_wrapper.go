package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/barnex/cuda5/cu"
	"unsafe"
)

var kernmulRSymm2Dyz_code cu.Function

type kernmulRSymm2Dyz_args struct {
	arg_fftMy  unsafe.Pointer
	arg_fftMz  unsafe.Pointer
	arg_fftKyy unsafe.Pointer
	arg_fftKzz unsafe.Pointer
	arg_fftKyz unsafe.Pointer
	arg_N1     int
	arg_N2     int
	argptr     [7]unsafe.Pointer
}

// Wrapper for kernmulRSymm2Dyz CUDA kernel, asynchronous.
func k_kernmulRSymm2Dyz_async(fftMy unsafe.Pointer, fftMz unsafe.Pointer, fftKyy unsafe.Pointer, fftKzz unsafe.Pointer, fftKyz unsafe.Pointer, N1 int, N2 int, cfg *config, str cu.Stream) {
	if kernmulRSymm2Dyz_code == 0 {
		kernmulRSymm2Dyz_code = fatbinLoad(kernmulRSymm2Dyz_map, "kernmulRSymm2Dyz")
	}

	var a kernmulRSymm2Dyz_args

	a.arg_fftMy = fftMy
	a.argptr[0] = unsafe.Pointer(&a.arg_fftMy)
	a.arg_fftMz = fftMz
	a.argptr[1] = unsafe.Pointer(&a.arg_fftMz)
	a.arg_fftKyy = fftKyy
	a.argptr[2] = unsafe.Pointer(&a.arg_fftKyy)
	a.arg_fftKzz = fftKzz
	a.argptr[3] = unsafe.Pointer(&a.arg_fftKzz)
	a.arg_fftKyz = fftKyz
	a.argptr[4] = unsafe.Pointer(&a.arg_fftKyz)
	a.arg_N1 = N1
	a.argptr[5] = unsafe.Pointer(&a.arg_N1)
	a.arg_N2 = N2
	a.argptr[6] = unsafe.Pointer(&a.arg_N2)

	args := a.argptr[:]
	cu.LaunchKernel(kernmulRSymm2Dyz_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, str, args)
}

// Wrapper for kernmulRSymm2Dyz CUDA kernel, synchronized.
func k_kernmulRSymm2Dyz(fftMy unsafe.Pointer, fftMz unsafe.Pointer, fftKyy unsafe.Pointer, fftKzz unsafe.Pointer, fftKyz unsafe.Pointer, N1 int, N2 int, cfg *config) {
	str := stream()
	k_kernmulRSymm2Dyz_async(fftMy, fftMz, fftKyy, fftKzz, fftKyz, N1, N2, cfg, str)
	syncAndRecycle(str)
}

var kernmulRSymm2Dyz_map = map[int]string{0: ""}
