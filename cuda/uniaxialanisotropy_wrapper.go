package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/barnex/cuda5/cu"
	"unsafe"
)

var uniaxialanisotropy_code cu.Function

type uniaxialanisotropy_args struct {
	arg_Bx unsafe.Pointer
	arg_By unsafe.Pointer
	arg_Bz unsafe.Pointer
	arg_Mx unsafe.Pointer
	arg_My unsafe.Pointer
	arg_Mz unsafe.Pointer
	arg_Ux float32
	arg_Uy float32
	arg_Uz float32
	arg_N  int
	argptr [10]unsafe.Pointer
}

// Wrapper for uniaxialanisotropy CUDA kernel, asynchronous.
func k_uniaxialanisotropy_async(Bx unsafe.Pointer, By unsafe.Pointer, Bz unsafe.Pointer, Mx unsafe.Pointer, My unsafe.Pointer, Mz unsafe.Pointer, Ux float32, Uy float32, Uz float32, N int, cfg *config, str cu.Stream) {
	if uniaxialanisotropy_code == 0 {
		uniaxialanisotropy_code = fatbinLoad(uniaxialanisotropy_map, "uniaxialanisotropy")
	}

	var a uniaxialanisotropy_args

	a.arg_Bx = Bx
	a.argptr[0] = unsafe.Pointer(&a.arg_Bx)
	a.arg_By = By
	a.argptr[1] = unsafe.Pointer(&a.arg_By)
	a.arg_Bz = Bz
	a.argptr[2] = unsafe.Pointer(&a.arg_Bz)
	a.arg_Mx = Mx
	a.argptr[3] = unsafe.Pointer(&a.arg_Mx)
	a.arg_My = My
	a.argptr[4] = unsafe.Pointer(&a.arg_My)
	a.arg_Mz = Mz
	a.argptr[5] = unsafe.Pointer(&a.arg_Mz)
	a.arg_Ux = Ux
	a.argptr[6] = unsafe.Pointer(&a.arg_Ux)
	a.arg_Uy = Uy
	a.argptr[7] = unsafe.Pointer(&a.arg_Uy)
	a.arg_Uz = Uz
	a.argptr[8] = unsafe.Pointer(&a.arg_Uz)
	a.arg_N = N
	a.argptr[9] = unsafe.Pointer(&a.arg_N)

	args := a.argptr[:]
	cu.LaunchKernel(uniaxialanisotropy_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, str, args)
}

// Wrapper for uniaxialanisotropy CUDA kernel, synchronized.
func k_uniaxialanisotropy(Bx unsafe.Pointer, By unsafe.Pointer, Bz unsafe.Pointer, Mx unsafe.Pointer, My unsafe.Pointer, Mz unsafe.Pointer, Ux float32, Uy float32, Uz float32, N int, cfg *config) {
	str := stream()
	k_uniaxialanisotropy_async(Bx, By, Bz, Mx, My, Mz, Ux, Uy, Uz, N, cfg, str)
	syncAndRecycle(str)
}

var uniaxialanisotropy_map = map[int]string{0: ""}
