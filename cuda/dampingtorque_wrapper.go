package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/barnex/cuda5/cu"
	"unsafe"
)

var dampingtorque_code cu.Function

type dampingtorque_args struct {
	arg_tx unsafe.Pointer
	arg_ty unsafe.Pointer
	arg_tz unsafe.Pointer
	arg_mx unsafe.Pointer
	arg_my unsafe.Pointer
	arg_mz unsafe.Pointer
	arg_hx unsafe.Pointer
	arg_hy unsafe.Pointer
	arg_hz unsafe.Pointer
	arg_N  int
	argptr [10]unsafe.Pointer
}

// Wrapper for dampingtorque CUDA kernel, asynchronous.
func k_dampingtorque_async(tx unsafe.Pointer, ty unsafe.Pointer, tz unsafe.Pointer, mx unsafe.Pointer, my unsafe.Pointer, mz unsafe.Pointer, hx unsafe.Pointer, hy unsafe.Pointer, hz unsafe.Pointer, N int, cfg *config, str cu.Stream) {
	if dampingtorque_code == 0 {
		dampingtorque_code = fatbinLoad(dampingtorque_map, "dampingtorque")
	}

	var a dampingtorque_args

	a.arg_tx = tx
	a.argptr[0] = unsafe.Pointer(&a.arg_tx)
	a.arg_ty = ty
	a.argptr[1] = unsafe.Pointer(&a.arg_ty)
	a.arg_tz = tz
	a.argptr[2] = unsafe.Pointer(&a.arg_tz)
	a.arg_mx = mx
	a.argptr[3] = unsafe.Pointer(&a.arg_mx)
	a.arg_my = my
	a.argptr[4] = unsafe.Pointer(&a.arg_my)
	a.arg_mz = mz
	a.argptr[5] = unsafe.Pointer(&a.arg_mz)
	a.arg_hx = hx
	a.argptr[6] = unsafe.Pointer(&a.arg_hx)
	a.arg_hy = hy
	a.argptr[7] = unsafe.Pointer(&a.arg_hy)
	a.arg_hz = hz
	a.argptr[8] = unsafe.Pointer(&a.arg_hz)
	a.arg_N = N
	a.argptr[9] = unsafe.Pointer(&a.arg_N)

	args := a.argptr[:]
	cu.LaunchKernel(dampingtorque_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, str, args)
}

// Wrapper for dampingtorque CUDA kernel, synchronized.
func k_dampingtorque(tx unsafe.Pointer, ty unsafe.Pointer, tz unsafe.Pointer, mx unsafe.Pointer, my unsafe.Pointer, mz unsafe.Pointer, hx unsafe.Pointer, hy unsafe.Pointer, hz unsafe.Pointer, N int, cfg *config) {
	str := stream()
	k_dampingtorque_async(tx, ty, tz, mx, my, mz, hx, hy, hz, N, cfg, str)
	syncAndRecycle(str)
}

var dampingtorque_map = map[int]string{0: ""}
