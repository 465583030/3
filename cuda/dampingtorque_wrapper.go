package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/barnex/cuda5/cu"
	"unsafe"
)

var dampingtorque_code cu.Function

type dampingtorque_args struct {
	arg_tx unsafe.Pointer
	arg_ty unsafe.Pointer
	arg_tz unsafe.Pointer
	arg_mx unsafe.Pointer
	arg_my unsafe.Pointer
	arg_mz unsafe.Pointer
	arg_hx unsafe.Pointer
	arg_hy unsafe.Pointer
	arg_hz unsafe.Pointer
	arg_N  int
	argptr [10]unsafe.Pointer
}

// Wrapper for dampingtorque CUDA kernel, asynchronous.
func k_dampingtorque_async(tx unsafe.Pointer, ty unsafe.Pointer, tz unsafe.Pointer, mx unsafe.Pointer, my unsafe.Pointer, mz unsafe.Pointer, hx unsafe.Pointer, hy unsafe.Pointer, hz unsafe.Pointer, N int, cfg *config, str cu.Stream) {
	if dampingtorque_code == 0 {
		dampingtorque_code = cu.ModuleLoadData(dampingtorque_ptx).GetFunction("dampingtorque")
	}

	var a dampingtorque_args

	a.arg_tx = tx
	a.argptr[0] = unsafe.Pointer(&a.arg_tx)
	a.arg_ty = ty
	a.argptr[1] = unsafe.Pointer(&a.arg_ty)
	a.arg_tz = tz
	a.argptr[2] = unsafe.Pointer(&a.arg_tz)
	a.arg_mx = mx
	a.argptr[3] = unsafe.Pointer(&a.arg_mx)
	a.arg_my = my
	a.argptr[4] = unsafe.Pointer(&a.arg_my)
	a.arg_mz = mz
	a.argptr[5] = unsafe.Pointer(&a.arg_mz)
	a.arg_hx = hx
	a.argptr[6] = unsafe.Pointer(&a.arg_hx)
	a.arg_hy = hy
	a.argptr[7] = unsafe.Pointer(&a.arg_hy)
	a.arg_hz = hz
	a.argptr[8] = unsafe.Pointer(&a.arg_hz)
	a.arg_N = N
	a.argptr[9] = unsafe.Pointer(&a.arg_N)

	args := a.argptr[:]
	cu.LaunchKernel(dampingtorque_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, str, args)
}

// Wrapper for dampingtorque CUDA kernel, synchronized.
func k_dampingtorque(tx unsafe.Pointer, ty unsafe.Pointer, tz unsafe.Pointer, mx unsafe.Pointer, my unsafe.Pointer, mz unsafe.Pointer, hx unsafe.Pointer, hy unsafe.Pointer, hz unsafe.Pointer, N int, cfg *config) {
	str := stream()
	k_dampingtorque_async(tx, ty, tz, mx, my, mz, hx, hy, hz, N, cfg, str)
	syncAndRecycle(str)
}

const dampingtorque_ptx = `
.version 3.0
.target sm_30
.address_size 64


.entry dampingtorque(
	.param .u64 dampingtorque_param_0,
	.param .u64 dampingtorque_param_1,
	.param .u64 dampingtorque_param_2,
	.param .u64 dampingtorque_param_3,
	.param .u64 dampingtorque_param_4,
	.param .u64 dampingtorque_param_5,
	.param .u64 dampingtorque_param_6,
	.param .u64 dampingtorque_param_7,
	.param .u64 dampingtorque_param_8,
	.param .u32 dampingtorque_param_9
)
{
	.reg .f32 	%f<28>;
	.reg .pred 	%p<2>;
	.reg .s32 	%r<18>;
	.reg .s64 	%rl<29>;


	ld.param.u64 	%rl10, [dampingtorque_param_0];
	ld.param.u64 	%rl11, [dampingtorque_param_1];
	ld.param.u64 	%rl12, [dampingtorque_param_2];
	ld.param.u64 	%rl13, [dampingtorque_param_3];
	ld.param.u64 	%rl14, [dampingtorque_param_4];
	ld.param.u64 	%rl15, [dampingtorque_param_5];
	ld.param.u64 	%rl16, [dampingtorque_param_6];
	ld.param.u64 	%rl17, [dampingtorque_param_7];
	ld.param.u64 	%rl18, [dampingtorque_param_8];
	ld.param.u32 	%r2, [dampingtorque_param_9];
	cvta.to.global.u64 	%rl1, %rl12;
	cvta.to.global.u64 	%rl2, %rl11;
	cvta.to.global.u64 	%rl3, %rl10;
	cvta.to.global.u64 	%rl4, %rl18;
	cvta.to.global.u64 	%rl5, %rl17;
	cvta.to.global.u64 	%rl6, %rl16;
	cvta.to.global.u64 	%rl7, %rl15;
	cvta.to.global.u64 	%rl8, %rl14;
	cvta.to.global.u64 	%rl9, %rl13;
	.loc 2 12 1
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	.loc 2 13 1
	setp.lt.s32 	%p1, %r1, %r2;
	@%p1 bra 	BB0_2;

	.loc 2 23 2
	ret;

BB0_2:
	.loc 2 15 1
	mul.wide.s32 	%rl19, %r1, 4;
	add.s64 	%rl20, %rl9, %rl19;
	add.s64 	%rl21, %rl8, %rl19;
	add.s64 	%rl22, %rl7, %rl19;
	.loc 2 16 1
	add.s64 	%rl23, %rl6, %rl19;
	add.s64 	%rl24, %rl5, %rl19;
	add.s64 	%rl25, %rl4, %rl19;
	.loc 2 15 1
	ld.global.f32 	%f1, [%rl21];
	.loc 2 16 1
	ld.global.f32 	%f2, [%rl25];
	ld.global.f32 	%f3, [%rl24];
	.loc 2 15 1
	ld.global.f32 	%f4, [%rl22];
	.loc 2 17 1
	mul.f32 	%f5, %f4, %f3;
	neg.f32 	%f6, %f2;
	fma.rn.f32 	%f7, %f6, %f1, %f5;
	.loc 2 16 1
	ld.global.f32 	%f8, [%rl23];
	.loc 2 15 1
	ld.global.f32 	%f9, [%rl20];
	.loc 2 17 1
	mul.f32 	%f10, %f9, %f2;
	neg.f32 	%f11, %f8;
	fma.rn.f32 	%f12, %f11, %f4, %f10;
	mul.f32 	%f13, %f1, %f8;
	neg.f32 	%f14, %f3;
	fma.rn.f32 	%f15, %f14, %f9, %f13;
	mul.f32 	%f16, %f4, %f12;
	neg.f32 	%f17, %f15;
	fma.rn.f32 	%f18, %f17, %f1, %f16;
	mul.f32 	%f19, %f9, %f15;
	neg.f32 	%f20, %f7;
	fma.rn.f32 	%f21, %f20, %f4, %f19;
	mul.f32 	%f22, %f1, %f7;
	neg.f32 	%f23, %f12;
	fma.rn.f32 	%f24, %f23, %f9, %f22;
	neg.f32 	%f25, %f18;
	neg.f32 	%f26, %f21;
	neg.f32 	%f27, %f24;
	.loc 2 19 1
	add.s64 	%rl26, %rl3, %rl19;
	st.global.f32 	[%rl26], %f25;
	.loc 2 20 1
	add.s64 	%rl27, %rl2, %rl19;
	st.global.f32 	[%rl27], %f26;
	.loc 2 21 1
	add.s64 	%rl28, %rl1, %rl19;
	st.global.f32 	[%rl28], %f27;
	.loc 2 23 2
	ret;
}


`
