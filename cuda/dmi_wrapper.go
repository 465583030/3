package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/barnex/cuda5/cu"
	"unsafe"
)

var dmi_code cu.Function

type dmi_args struct {
	arg_Hx unsafe.Pointer
	arg_Hy unsafe.Pointer
	arg_Hz unsafe.Pointer
	arg_mx unsafe.Pointer
	arg_my unsafe.Pointer
	arg_mz unsafe.Pointer
	arg_dx float32
	arg_dy float32
	arg_dz float32
	arg_cx float32
	arg_cy float32
	arg_cz float32
	arg_N0 int
	arg_N1 int
	arg_N2 int
	argptr [15]unsafe.Pointer
}

// Wrapper for dmi CUDA kernel, asynchronous.
func k_dmi_async(Hx unsafe.Pointer, Hy unsafe.Pointer, Hz unsafe.Pointer, mx unsafe.Pointer, my unsafe.Pointer, mz unsafe.Pointer, dx float32, dy float32, dz float32, cx float32, cy float32, cz float32, N0 int, N1 int, N2 int, cfg *config, str cu.Stream) {
	if dmi_code == 0 {
		dmi_code = fatbinLoad(dmi_map, "dmi")
	}

	var a dmi_args

	a.arg_Hx = Hx
	a.argptr[0] = unsafe.Pointer(&a.arg_Hx)
	a.arg_Hy = Hy
	a.argptr[1] = unsafe.Pointer(&a.arg_Hy)
	a.arg_Hz = Hz
	a.argptr[2] = unsafe.Pointer(&a.arg_Hz)
	a.arg_mx = mx
	a.argptr[3] = unsafe.Pointer(&a.arg_mx)
	a.arg_my = my
	a.argptr[4] = unsafe.Pointer(&a.arg_my)
	a.arg_mz = mz
	a.argptr[5] = unsafe.Pointer(&a.arg_mz)
	a.arg_dx = dx
	a.argptr[6] = unsafe.Pointer(&a.arg_dx)
	a.arg_dy = dy
	a.argptr[7] = unsafe.Pointer(&a.arg_dy)
	a.arg_dz = dz
	a.argptr[8] = unsafe.Pointer(&a.arg_dz)
	a.arg_cx = cx
	a.argptr[9] = unsafe.Pointer(&a.arg_cx)
	a.arg_cy = cy
	a.argptr[10] = unsafe.Pointer(&a.arg_cy)
	a.arg_cz = cz
	a.argptr[11] = unsafe.Pointer(&a.arg_cz)
	a.arg_N0 = N0
	a.argptr[12] = unsafe.Pointer(&a.arg_N0)
	a.arg_N1 = N1
	a.argptr[13] = unsafe.Pointer(&a.arg_N1)
	a.arg_N2 = N2
	a.argptr[14] = unsafe.Pointer(&a.arg_N2)

	args := a.argptr[:]
	cu.LaunchKernel(dmi_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, str, args)
}

// Wrapper for dmi CUDA kernel, synchronized.
func k_dmi(Hx unsafe.Pointer, Hy unsafe.Pointer, Hz unsafe.Pointer, mx unsafe.Pointer, my unsafe.Pointer, mz unsafe.Pointer, dx float32, dy float32, dz float32, cx float32, cy float32, cz float32, N0 int, N1 int, N2 int, cfg *config) {
	str := stream()
	k_dmi_async(Hx, Hy, Hz, mx, my, mz, dx, dy, dz, cx, cy, cz, N0, N1, N2, cfg, str)
	syncAndRecycle(str)
}

var dmi_map = map[int]string{0: ""}
