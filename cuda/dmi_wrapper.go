package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/barnex/cuda5/cu"
	"unsafe"
)

var adddmi_code cu.Function

type adddmi_args struct {
	arg_Hx unsafe.Pointer
	arg_Hy unsafe.Pointer
	arg_Hz unsafe.Pointer
	arg_mx unsafe.Pointer
	arg_my unsafe.Pointer
	arg_mz unsafe.Pointer
	arg_Dx float32
	arg_Dy float32
	arg_Dz float32
	arg_N0 int
	arg_N1 int
	arg_N2 int
	argptr [12]unsafe.Pointer
}

// Wrapper for adddmi CUDA kernel, asynchronous.
func k_adddmi_async(Hx unsafe.Pointer, Hy unsafe.Pointer, Hz unsafe.Pointer, mx unsafe.Pointer, my unsafe.Pointer, mz unsafe.Pointer, Dx float32, Dy float32, Dz float32, N0 int, N1 int, N2 int, cfg *config, str cu.Stream) {
	if adddmi_code == 0 {
		adddmi_code = fatbinLoad(adddmi_map, "adddmi")
	}

	var a adddmi_args

	a.arg_Hx = Hx
	a.argptr[0] = unsafe.Pointer(&a.arg_Hx)
	a.arg_Hy = Hy
	a.argptr[1] = unsafe.Pointer(&a.arg_Hy)
	a.arg_Hz = Hz
	a.argptr[2] = unsafe.Pointer(&a.arg_Hz)
	a.arg_mx = mx
	a.argptr[3] = unsafe.Pointer(&a.arg_mx)
	a.arg_my = my
	a.argptr[4] = unsafe.Pointer(&a.arg_my)
	a.arg_mz = mz
	a.argptr[5] = unsafe.Pointer(&a.arg_mz)
	a.arg_Dx = Dx
	a.argptr[6] = unsafe.Pointer(&a.arg_Dx)
	a.arg_Dy = Dy
	a.argptr[7] = unsafe.Pointer(&a.arg_Dy)
	a.arg_Dz = Dz
	a.argptr[8] = unsafe.Pointer(&a.arg_Dz)
	a.arg_N0 = N0
	a.argptr[9] = unsafe.Pointer(&a.arg_N0)
	a.arg_N1 = N1
	a.argptr[10] = unsafe.Pointer(&a.arg_N1)
	a.arg_N2 = N2
	a.argptr[11] = unsafe.Pointer(&a.arg_N2)

	args := a.argptr[:]
	cu.LaunchKernel(adddmi_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, str, args)
}

// Wrapper for adddmi CUDA kernel, synchronized.
func k_adddmi(Hx unsafe.Pointer, Hy unsafe.Pointer, Hz unsafe.Pointer, mx unsafe.Pointer, my unsafe.Pointer, mz unsafe.Pointer, Dx float32, Dy float32, Dz float32, N0 int, N1 int, N2 int, cfg *config) {
	str := stream()
	k_adddmi_async(Hx, Hy, Hz, mx, my, mz, Dx, Dy, Dz, N0, N1, N2, cfg, str)
	syncAndRecycle(str)
}

var adddmi_map = map[int]string{0: "",
	20: adddmi_ptx_20,
	30: adddmi_ptx_30,
	35: adddmi_ptx_35}

const (
	adddmi_ptx_20 = `
.version 3.1
.target sm_20
.address_size 64


.visible .entry adddmi(
	.param .u64 adddmi_param_0,
	.param .u64 adddmi_param_1,
	.param .u64 adddmi_param_2,
	.param .u64 adddmi_param_3,
	.param .u64 adddmi_param_4,
	.param .u64 adddmi_param_5,
	.param .f32 adddmi_param_6,
	.param .f32 adddmi_param_7,
	.param .f32 adddmi_param_8,
	.param .u32 adddmi_param_9,
	.param .u32 adddmi_param_10,
	.param .u32 adddmi_param_11
)
{
	.reg .pred 	%p<7>;
	.reg .s32 	%r<43>;
	.reg .f32 	%f<8>;
	.reg .s64 	%rd<11>;


	ld.param.u64 	%rd3, [adddmi_param_2];
	ld.param.u64 	%rd4, [adddmi_param_3];
	ld.param.f32 	%f1, [adddmi_param_8];
	ld.param.u32 	%r19, [adddmi_param_9];
	ld.param.u32 	%r20, [adddmi_param_10];
	ld.param.u32 	%r21, [adddmi_param_11];
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	.loc 2 13 1
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r1, %r2, %r3;
	.loc 2 14 1
	mov.u32 	%r5, %ntid.y;
	mov.u32 	%r6, %ctaid.y;
	mov.u32 	%r7, %tid.y;
	mad.lo.s32 	%r8, %r5, %r6, %r7;
	.loc 2 16 1
	setp.lt.s32 	%p1, %r8, %r21;
	setp.lt.s32 	%p2, %r4, %r20;
	and.pred  	%p3, %p2, %p1;
	.loc 2 20 1
	setp.gt.s32 	%p4, %r19, 0;
	.loc 2 16 1
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB0_3;
	bra.uni 	BB0_1;

BB0_1:
	.loc 2 30 1
	add.s32 	%r9, %r19, -1;
	add.s32 	%r23, %r20, -1;
	mov.u32 	%r22, 0;
	.loc 3 238 5
	max.s32 	%r24, %r4, %r22;
	.loc 3 210 5
	min.s32 	%r10, %r24, %r23;
	.loc 2 30 1
	add.s32 	%r25, %r8, 1;
	.loc 3 238 5
	max.s32 	%r26, %r25, %r22;
	.loc 2 30 1
	add.s32 	%r27, %r21, -1;
	.loc 3 210 5
	min.s32 	%r11, %r26, %r27;
	.loc 3 238 5
	max.s32 	%r28, %r8, %r22;
	.loc 3 210 5
	min.s32 	%r12, %r28, %r27;
	.loc 2 20 1
	mad.lo.s32 	%r41, %r21, %r4, %r8;
	mul.lo.s32 	%r14, %r21, %r20;
	mov.u32 	%r42, %r22;

BB0_2:
	.loc 2 23 1
	mov.u32 	%r16, %r42;
	mul.wide.s32 	%rd5, %r41, 4;
	add.s64 	%rd6, %rd2, %rd5;
	.loc 3 238 5
	max.s32 	%r32, %r16, %r22;
	.loc 3 210 5
	min.s32 	%r33, %r32, %r9;
	.loc 2 30 1
	mad.lo.s32 	%r34, %r33, %r20, %r10;
	mad.lo.s32 	%r35, %r34, %r21, %r11;
	mul.wide.s32 	%rd7, %r35, 4;
	add.s64 	%rd8, %rd1, %rd7;
	mad.lo.s32 	%r36, %r34, %r21, %r12;
	mul.wide.s32 	%rd9, %r36, 4;
	add.s64 	%rd10, %rd1, %rd9;
	ld.global.f32 	%f2, [%rd10];
	ld.global.f32 	%f3, [%rd8];
	sub.f32 	%f4, %f3, %f2;
	mul.f32 	%f5, %f4, %f1;
	.loc 2 23 1
	ld.global.f32 	%f6, [%rd6];
	.loc 2 30 1
	sub.f32 	%f7, %f6, %f5;
	.loc 2 35 1
	st.global.f32 	[%rd6], %f7;
	.loc 2 20 1
	add.s32 	%r41, %r41, %r14;
	.loc 2 20 18
	add.s32 	%r18, %r16, 1;
	.loc 2 20 1
	setp.lt.s32 	%p6, %r18, %r19;
	mov.u32 	%r42, %r18;
	@%p6 bra 	BB0_2;

BB0_3:
	.loc 2 37 2
	ret;
}


`
	adddmi_ptx_30 = `
.version 3.1
.target sm_30
.address_size 64


.visible .entry adddmi(
	.param .u64 adddmi_param_0,
	.param .u64 adddmi_param_1,
	.param .u64 adddmi_param_2,
	.param .u64 adddmi_param_3,
	.param .u64 adddmi_param_4,
	.param .u64 adddmi_param_5,
	.param .f32 adddmi_param_6,
	.param .f32 adddmi_param_7,
	.param .f32 adddmi_param_8,
	.param .u32 adddmi_param_9,
	.param .u32 adddmi_param_10,
	.param .u32 adddmi_param_11
)
{
	.reg .pred 	%p<7>;
	.reg .s32 	%r<43>;
	.reg .f32 	%f<8>;
	.reg .s64 	%rd<11>;


	ld.param.u64 	%rd3, [adddmi_param_2];
	ld.param.u64 	%rd4, [adddmi_param_3];
	ld.param.f32 	%f1, [adddmi_param_8];
	ld.param.u32 	%r19, [adddmi_param_9];
	ld.param.u32 	%r20, [adddmi_param_10];
	ld.param.u32 	%r21, [adddmi_param_11];
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	.loc 2 13 1
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r1, %r2, %r3;
	.loc 2 14 1
	mov.u32 	%r5, %ntid.y;
	mov.u32 	%r6, %ctaid.y;
	mov.u32 	%r7, %tid.y;
	mad.lo.s32 	%r8, %r5, %r6, %r7;
	.loc 2 16 1
	setp.lt.s32 	%p1, %r8, %r21;
	setp.lt.s32 	%p2, %r4, %r20;
	and.pred  	%p3, %p2, %p1;
	.loc 2 20 1
	setp.gt.s32 	%p4, %r19, 0;
	.loc 2 16 1
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB0_3;
	bra.uni 	BB0_1;

BB0_1:
	.loc 2 30 1
	add.s32 	%r9, %r19, -1;
	add.s32 	%r23, %r20, -1;
	mov.u32 	%r22, 0;
	.loc 3 238 5
	max.s32 	%r24, %r4, %r22;
	.loc 3 210 5
	min.s32 	%r10, %r24, %r23;
	.loc 2 30 1
	add.s32 	%r25, %r8, 1;
	.loc 3 238 5
	max.s32 	%r26, %r25, %r22;
	.loc 2 30 1
	add.s32 	%r27, %r21, -1;
	.loc 3 210 5
	min.s32 	%r11, %r26, %r27;
	.loc 3 238 5
	max.s32 	%r28, %r8, %r22;
	.loc 3 210 5
	min.s32 	%r12, %r28, %r27;
	.loc 2 20 1
	mad.lo.s32 	%r41, %r21, %r4, %r8;
	mul.lo.s32 	%r14, %r21, %r20;
	mov.u32 	%r42, %r22;

BB0_2:
	.loc 2 23 1
	mov.u32 	%r16, %r42;
	mul.wide.s32 	%rd5, %r41, 4;
	add.s64 	%rd6, %rd2, %rd5;
	.loc 3 238 5
	max.s32 	%r32, %r16, %r22;
	.loc 3 210 5
	min.s32 	%r33, %r32, %r9;
	.loc 2 30 1
	mad.lo.s32 	%r34, %r33, %r20, %r10;
	mad.lo.s32 	%r35, %r34, %r21, %r11;
	mul.wide.s32 	%rd7, %r35, 4;
	add.s64 	%rd8, %rd1, %rd7;
	mad.lo.s32 	%r36, %r34, %r21, %r12;
	mul.wide.s32 	%rd9, %r36, 4;
	add.s64 	%rd10, %rd1, %rd9;
	ld.global.f32 	%f2, [%rd10];
	ld.global.f32 	%f3, [%rd8];
	sub.f32 	%f4, %f3, %f2;
	mul.f32 	%f5, %f4, %f1;
	.loc 2 23 1
	ld.global.f32 	%f6, [%rd6];
	.loc 2 30 1
	sub.f32 	%f7, %f6, %f5;
	.loc 2 35 1
	st.global.f32 	[%rd6], %f7;
	.loc 2 20 1
	add.s32 	%r41, %r41, %r14;
	.loc 2 20 18
	add.s32 	%r18, %r16, 1;
	.loc 2 20 1
	setp.lt.s32 	%p6, %r18, %r19;
	mov.u32 	%r42, %r18;
	@%p6 bra 	BB0_2;

BB0_3:
	.loc 2 37 2
	ret;
}


`
	adddmi_ptx_35 = `
.version 3.1
.target sm_35
.address_size 64


.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	.loc 2 66 3
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	.loc 2 71 3
	ret;
}

.visible .entry adddmi(
	.param .u64 adddmi_param_0,
	.param .u64 adddmi_param_1,
	.param .u64 adddmi_param_2,
	.param .u64 adddmi_param_3,
	.param .u64 adddmi_param_4,
	.param .u64 adddmi_param_5,
	.param .f32 adddmi_param_6,
	.param .f32 adddmi_param_7,
	.param .f32 adddmi_param_8,
	.param .u32 adddmi_param_9,
	.param .u32 adddmi_param_10,
	.param .u32 adddmi_param_11
)
{
	.reg .pred 	%p<7>;
	.reg .s32 	%r<41>;
	.reg .f32 	%f<8>;
	.reg .s64 	%rd<11>;


	ld.param.u64 	%rd3, [adddmi_param_2];
	ld.param.u64 	%rd4, [adddmi_param_3];
	ld.param.f32 	%f1, [adddmi_param_8];
	ld.param.u32 	%r19, [adddmi_param_9];
	ld.param.u32 	%r20, [adddmi_param_10];
	ld.param.u32 	%r21, [adddmi_param_11];
	cvta.to.global.u64 	%rd1, %rd4;
	cvta.to.global.u64 	%rd2, %rd3;
	.loc 3 13 1
	mov.u32 	%r1, %ntid.x;
	mov.u32 	%r2, %ctaid.x;
	mov.u32 	%r3, %tid.x;
	mad.lo.s32 	%r4, %r1, %r2, %r3;
	.loc 3 14 1
	mov.u32 	%r5, %ntid.y;
	mov.u32 	%r6, %ctaid.y;
	mov.u32 	%r7, %tid.y;
	mad.lo.s32 	%r8, %r5, %r6, %r7;
	.loc 3 16 1
	setp.lt.s32 	%p1, %r8, %r21;
	setp.lt.s32 	%p2, %r4, %r20;
	and.pred  	%p3, %p2, %p1;
	.loc 3 20 1
	setp.gt.s32 	%p4, %r19, 0;
	.loc 3 16 1
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB2_3;
	bra.uni 	BB2_1;

BB2_1:
	.loc 3 30 1
	add.s32 	%r9, %r19, -1;
	add.s32 	%r23, %r20, -1;
	mov.u32 	%r22, 0;
	.loc 4 238 5
	max.s32 	%r24, %r4, %r22;
	.loc 4 210 5
	min.s32 	%r10, %r24, %r23;
	.loc 3 30 1
	add.s32 	%r25, %r8, 1;
	.loc 4 238 5
	max.s32 	%r26, %r25, %r22;
	.loc 3 30 1
	add.s32 	%r27, %r21, -1;
	.loc 4 210 5
	min.s32 	%r11, %r26, %r27;
	.loc 4 238 5
	max.s32 	%r28, %r8, %r22;
	.loc 4 210 5
	min.s32 	%r12, %r28, %r27;
	.loc 3 20 1
	mad.lo.s32 	%r39, %r21, %r4, %r8;
	mul.lo.s32 	%r14, %r21, %r20;
	mov.u32 	%r40, %r22;

BB2_2:
	.loc 3 23 1
	mov.u32 	%r16, %r40;
	mul.wide.s32 	%rd5, %r39, 4;
	add.s64 	%rd6, %rd2, %rd5;
	ld.global.f32 	%f2, [%rd6];
	.loc 4 238 5
	max.s32 	%r33, %r16, %r22;
	.loc 4 210 5
	min.s32 	%r34, %r33, %r9;
	.loc 3 30 1
	mad.lo.s32 	%r35, %r34, %r20, %r10;
	mad.lo.s32 	%r36, %r35, %r21, %r11;
	mul.wide.s32 	%rd7, %r36, 4;
	add.s64 	%rd8, %rd1, %rd7;
	ld.global.nc.f32 	%f3, [%rd8];
	mad.lo.s32 	%r37, %r35, %r21, %r12;
	mul.wide.s32 	%rd9, %r37, 4;
	add.s64 	%rd10, %rd1, %rd9;
	ld.global.nc.f32 	%f4, [%rd10];
	sub.f32 	%f5, %f3, %f4;
	mul.f32 	%f6, %f5, %f1;
	sub.f32 	%f7, %f2, %f6;
	.loc 3 35 1
	st.global.f32 	[%rd6], %f7;
	.loc 3 20 1
	add.s32 	%r39, %r39, %r14;
	.loc 3 20 18
	add.s32 	%r18, %r16, 1;
	.loc 3 20 1
	setp.lt.s32 	%p6, %r18, %r19;
	mov.u32 	%r40, %r18;
	@%p6 bra 	BB2_2;

BB2_3:
	.loc 3 37 2
	ret;
}


`
)
