package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/barnex/cuda5/cu"
	"unsafe"
)

var copyunpad_code cu.Function

type copyunpad_args struct {
	arg_dst unsafe.Pointer
	arg_D0  int
	arg_D1  int
	arg_D2  int
	arg_src unsafe.Pointer
	arg_S0  int
	arg_S1  int
	arg_S2  int
	argptr  [8]unsafe.Pointer
}

// Wrapper for copyunpad CUDA kernel, asynchronous.
func k_copyunpad_async(dst unsafe.Pointer, D0 int, D1 int, D2 int, src unsafe.Pointer, S0 int, S1 int, S2 int, cfg *config, str cu.Stream) {
	if copyunpad_code == 0 {
		copyunpad_code = fatbinLoad(copyunpad_map, "copyunpad")
	}

	var _a_ copyunpad_args

	_a_.arg_dst = dst
	_a_.argptr[0] = unsafe.Pointer(&_a_.arg_dst)
	_a_.arg_D0 = D0
	_a_.argptr[1] = unsafe.Pointer(&_a_.arg_D0)
	_a_.arg_D1 = D1
	_a_.argptr[2] = unsafe.Pointer(&_a_.arg_D1)
	_a_.arg_D2 = D2
	_a_.argptr[3] = unsafe.Pointer(&_a_.arg_D2)
	_a_.arg_src = src
	_a_.argptr[4] = unsafe.Pointer(&_a_.arg_src)
	_a_.arg_S0 = S0
	_a_.argptr[5] = unsafe.Pointer(&_a_.arg_S0)
	_a_.arg_S1 = S1
	_a_.argptr[6] = unsafe.Pointer(&_a_.arg_S1)
	_a_.arg_S2 = S2
	_a_.argptr[7] = unsafe.Pointer(&_a_.arg_S2)

	args := _a_.argptr[:]
	cu.LaunchKernel(copyunpad_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, str, args)
}

// Wrapper for copyunpad CUDA kernel, synchronized.
func k_copyunpad(dst unsafe.Pointer, D0 int, D1 int, D2 int, src unsafe.Pointer, S0 int, S1 int, S2 int, cfg *config) {
	str := stream()
	k_copyunpad_async(dst, D0, D1, D2, src, S0, S1, S2, cfg, str)
	syncAndRecycle(str)
}

var copyunpad_map = map[int]string{0: "",
	20: copyunpad_ptx_20,
	30: copyunpad_ptx_30,
	35: copyunpad_ptx_35}

const (
	copyunpad_ptx_20 = `
.version 3.1
.target sm_20
.address_size 64


.visible .entry copyunpad(
	.param .u64 copyunpad_param_0,
	.param .u32 copyunpad_param_1,
	.param .u32 copyunpad_param_2,
	.param .u32 copyunpad_param_3,
	.param .u64 copyunpad_param_4,
	.param .u32 copyunpad_param_5,
	.param .u32 copyunpad_param_6,
	.param .u32 copyunpad_param_7
)
{
	.reg .pred 	%p<7>;
	.reg .s32 	%r<22>;
	.reg .f32 	%f<2>;
	.reg .s64 	%rd<25>;


	ld.param.u64 	%rd11, [copyunpad_param_0];
	ld.param.u32 	%r9, [copyunpad_param_1];
	ld.param.u32 	%r10, [copyunpad_param_2];
	ld.param.u32 	%r11, [copyunpad_param_3];
	ld.param.u64 	%rd12, [copyunpad_param_4];
	ld.param.u32 	%r12, [copyunpad_param_6];
	ld.param.u32 	%r13, [copyunpad_param_7];
	cvta.to.global.u64 	%rd1, %rd11;
	cvta.to.global.u64 	%rd2, %rd12;
	.loc 2 7 1
	mov.u32 	%r1, %ntid.y;
	mov.u32 	%r2, %ctaid.y;
	mov.u32 	%r3, %tid.y;
	mad.lo.s32 	%r14, %r1, %r2, %r3;
	.loc 2 8 1
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r15, %r4, %r5, %r6;
	.loc 2 10 1
	setp.lt.s32 	%p1, %r15, %r11;
	setp.lt.s32 	%p2, %r14, %r10;
	and.pred  	%p3, %p2, %p1;
	.loc 2 14 1
	setp.gt.s32 	%p4, %r9, 0;
	.loc 2 10 1
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB0_3;
	bra.uni 	BB0_1;

BB0_1:
	.loc 2 14 1
	cvt.s64.s32 	%rd13, %r14;
	cvt.s64.s32 	%rd14, %r11;
	cvt.s64.s32 	%rd15, %r15;
	.loc 2 15 1
	mad.lo.s64 	%rd16, %rd14, %rd13, %rd15;
	.loc 2 14 1
	shl.b64 	%rd17, %rd16, 2;
	add.s64 	%rd24, %rd1, %rd17;
	.loc 2 15 1
	mul.wide.s32 	%rd18, %r11, %r10;
	shl.b64 	%rd4, %rd18, 2;
	.loc 2 14 1
	cvt.s64.s32 	%rd19, %r13;
	.loc 2 15 1
	mad.lo.s64 	%rd20, %rd19, %rd13, %rd15;
	.loc 2 14 1
	shl.b64 	%rd21, %rd20, 2;
	add.s64 	%rd23, %rd2, %rd21;
	.loc 2 15 1
	mul.wide.s32 	%rd22, %r13, %r12;
	shl.b64 	%rd6, %rd22, 2;
	mov.u32 	%r21, 0;

BB0_2:
	.loc 2 15 1
	ld.global.f32 	%f1, [%rd23];
	st.global.f32 	[%rd24], %f1;
	.loc 2 14 1
	add.s64 	%rd24, %rd24, %rd4;
	add.s64 	%rd23, %rd23, %rd6;
	.loc 2 14 18
	add.s32 	%r21, %r21, 1;
	.loc 2 14 1
	setp.lt.s32 	%p6, %r21, %r9;
	@%p6 bra 	BB0_2;

BB0_3:
	.loc 2 17 2
	ret;
}


`
	copyunpad_ptx_30 = `
.version 3.1
.target sm_30
.address_size 64


.visible .entry copyunpad(
	.param .u64 copyunpad_param_0,
	.param .u32 copyunpad_param_1,
	.param .u32 copyunpad_param_2,
	.param .u32 copyunpad_param_3,
	.param .u64 copyunpad_param_4,
	.param .u32 copyunpad_param_5,
	.param .u32 copyunpad_param_6,
	.param .u32 copyunpad_param_7
)
{
	.reg .pred 	%p<7>;
	.reg .s32 	%r<22>;
	.reg .f32 	%f<2>;
	.reg .s64 	%rd<25>;


	ld.param.u64 	%rd11, [copyunpad_param_0];
	ld.param.u32 	%r9, [copyunpad_param_1];
	ld.param.u32 	%r10, [copyunpad_param_2];
	ld.param.u32 	%r11, [copyunpad_param_3];
	ld.param.u64 	%rd12, [copyunpad_param_4];
	ld.param.u32 	%r12, [copyunpad_param_6];
	ld.param.u32 	%r13, [copyunpad_param_7];
	cvta.to.global.u64 	%rd1, %rd11;
	cvta.to.global.u64 	%rd2, %rd12;
	.loc 2 7 1
	mov.u32 	%r1, %ntid.y;
	mov.u32 	%r2, %ctaid.y;
	mov.u32 	%r3, %tid.y;
	mad.lo.s32 	%r14, %r1, %r2, %r3;
	.loc 2 8 1
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r15, %r4, %r5, %r6;
	.loc 2 10 1
	setp.lt.s32 	%p1, %r15, %r11;
	setp.lt.s32 	%p2, %r14, %r10;
	and.pred  	%p3, %p2, %p1;
	.loc 2 14 1
	setp.gt.s32 	%p4, %r9, 0;
	.loc 2 10 1
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB0_3;
	bra.uni 	BB0_1;

BB0_1:
	.loc 2 14 1
	cvt.s64.s32 	%rd13, %r14;
	cvt.s64.s32 	%rd14, %r11;
	cvt.s64.s32 	%rd15, %r15;
	.loc 2 15 1
	mad.lo.s64 	%rd16, %rd14, %rd13, %rd15;
	.loc 2 14 1
	shl.b64 	%rd17, %rd16, 2;
	add.s64 	%rd24, %rd1, %rd17;
	.loc 2 15 1
	mul.wide.s32 	%rd18, %r11, %r10;
	shl.b64 	%rd4, %rd18, 2;
	.loc 2 14 1
	cvt.s64.s32 	%rd19, %r13;
	.loc 2 15 1
	mad.lo.s64 	%rd20, %rd19, %rd13, %rd15;
	.loc 2 14 1
	shl.b64 	%rd21, %rd20, 2;
	add.s64 	%rd23, %rd2, %rd21;
	.loc 2 15 1
	mul.wide.s32 	%rd22, %r13, %r12;
	shl.b64 	%rd6, %rd22, 2;
	mov.u32 	%r21, 0;

BB0_2:
	.loc 2 15 1
	ld.global.f32 	%f1, [%rd23];
	st.global.f32 	[%rd24], %f1;
	.loc 2 14 1
	add.s64 	%rd24, %rd24, %rd4;
	add.s64 	%rd23, %rd23, %rd6;
	.loc 2 14 18
	add.s32 	%r21, %r21, 1;
	.loc 2 14 1
	setp.lt.s32 	%p6, %r21, %r9;
	@%p6 bra 	BB0_2;

BB0_3:
	.loc 2 17 2
	ret;
}


`
	copyunpad_ptx_35 = `
.version 3.1
.target sm_35
.address_size 64


.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	.loc 2 66 3
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	.loc 2 71 3
	ret;
}

.visible .entry copyunpad(
	.param .u64 copyunpad_param_0,
	.param .u32 copyunpad_param_1,
	.param .u32 copyunpad_param_2,
	.param .u32 copyunpad_param_3,
	.param .u64 copyunpad_param_4,
	.param .u32 copyunpad_param_5,
	.param .u32 copyunpad_param_6,
	.param .u32 copyunpad_param_7
)
{
	.reg .pred 	%p<7>;
	.reg .s32 	%r<21>;
	.reg .f32 	%f<2>;
	.reg .s64 	%rd<25>;


	ld.param.u64 	%rd11, [copyunpad_param_0];
	ld.param.u32 	%r9, [copyunpad_param_1];
	ld.param.u32 	%r10, [copyunpad_param_2];
	ld.param.u32 	%r11, [copyunpad_param_3];
	ld.param.u64 	%rd12, [copyunpad_param_4];
	ld.param.u32 	%r12, [copyunpad_param_6];
	ld.param.u32 	%r13, [copyunpad_param_7];
	cvta.to.global.u64 	%rd1, %rd11;
	cvta.to.global.u64 	%rd2, %rd12;
	.loc 3 7 1
	mov.u32 	%r1, %ntid.y;
	mov.u32 	%r2, %ctaid.y;
	mov.u32 	%r3, %tid.y;
	mad.lo.s32 	%r14, %r1, %r2, %r3;
	.loc 3 8 1
	mov.u32 	%r4, %ntid.x;
	mov.u32 	%r5, %ctaid.x;
	mov.u32 	%r6, %tid.x;
	mad.lo.s32 	%r15, %r4, %r5, %r6;
	.loc 3 10 1
	setp.lt.s32 	%p1, %r15, %r11;
	setp.lt.s32 	%p2, %r14, %r10;
	and.pred  	%p3, %p2, %p1;
	.loc 3 14 1
	setp.gt.s32 	%p4, %r9, 0;
	.loc 3 10 1
	and.pred  	%p5, %p3, %p4;
	@!%p5 bra 	BB2_3;
	bra.uni 	BB2_1;

BB2_1:
	.loc 3 14 1
	cvt.s64.s32 	%rd13, %r14;
	cvt.s64.s32 	%rd14, %r11;
	cvt.s64.s32 	%rd15, %r15;
	.loc 3 15 1
	mad.lo.s64 	%rd16, %rd14, %rd13, %rd15;
	.loc 3 14 1
	shl.b64 	%rd17, %rd16, 2;
	add.s64 	%rd24, %rd1, %rd17;
	.loc 3 15 1
	mul.wide.s32 	%rd18, %r11, %r10;
	shl.b64 	%rd4, %rd18, 2;
	.loc 3 14 1
	cvt.s64.s32 	%rd19, %r13;
	.loc 3 15 1
	mad.lo.s64 	%rd20, %rd19, %rd13, %rd15;
	.loc 3 14 1
	shl.b64 	%rd21, %rd20, 2;
	add.s64 	%rd23, %rd2, %rd21;
	.loc 3 15 1
	mul.wide.s32 	%rd22, %r13, %r12;
	shl.b64 	%rd6, %rd22, 2;
	mov.u32 	%r20, 0;

BB2_2:
	.loc 3 15 1
	ld.global.nc.f32 	%f1, [%rd23];
	st.global.f32 	[%rd24], %f1;
	.loc 3 14 1
	add.s64 	%rd24, %rd24, %rd4;
	add.s64 	%rd23, %rd23, %rd6;
	.loc 3 14 18
	add.s32 	%r20, %r20, 1;
	.loc 3 14 1
	setp.lt.s32 	%p6, %r20, %r9;
	@%p6 bra 	BB2_2;

BB2_3:
	.loc 3 17 2
	ret;
}


`
)
