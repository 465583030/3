package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/barnex/cuda5/cu"
	"unsafe"
)

var reducemaxvecdiff2_code cu.Function

type reducemaxvecdiff2_args struct {
	arg_x1      unsafe.Pointer
	arg_y1      unsafe.Pointer
	arg_z1      unsafe.Pointer
	arg_x2      unsafe.Pointer
	arg_y2      unsafe.Pointer
	arg_z2      unsafe.Pointer
	arg_dst     unsafe.Pointer
	arg_initVal float32
	arg_n       int
	argptr      [9]unsafe.Pointer
}

// Wrapper for reducemaxvecdiff2 CUDA kernel, asynchronous.
func k_reducemaxvecdiff2_async(x1 unsafe.Pointer, y1 unsafe.Pointer, z1 unsafe.Pointer, x2 unsafe.Pointer, y2 unsafe.Pointer, z2 unsafe.Pointer, dst unsafe.Pointer, initVal float32, n int, cfg *config, str cu.Stream) {
	if reducemaxvecdiff2_code == 0 {
		reducemaxvecdiff2_code = fatbinLoad(reducemaxvecdiff2_map, "reducemaxvecdiff2")
	}

	var a reducemaxvecdiff2_args

	a.arg_x1 = x1
	a.argptr[0] = unsafe.Pointer(&a.arg_x1)
	a.arg_y1 = y1
	a.argptr[1] = unsafe.Pointer(&a.arg_y1)
	a.arg_z1 = z1
	a.argptr[2] = unsafe.Pointer(&a.arg_z1)
	a.arg_x2 = x2
	a.argptr[3] = unsafe.Pointer(&a.arg_x2)
	a.arg_y2 = y2
	a.argptr[4] = unsafe.Pointer(&a.arg_y2)
	a.arg_z2 = z2
	a.argptr[5] = unsafe.Pointer(&a.arg_z2)
	a.arg_dst = dst
	a.argptr[6] = unsafe.Pointer(&a.arg_dst)
	a.arg_initVal = initVal
	a.argptr[7] = unsafe.Pointer(&a.arg_initVal)
	a.arg_n = n
	a.argptr[8] = unsafe.Pointer(&a.arg_n)

	args := a.argptr[:]
	cu.LaunchKernel(reducemaxvecdiff2_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, str, args)
}

// Wrapper for reducemaxvecdiff2 CUDA kernel, synchronized.
func k_reducemaxvecdiff2(x1 unsafe.Pointer, y1 unsafe.Pointer, z1 unsafe.Pointer, x2 unsafe.Pointer, y2 unsafe.Pointer, z2 unsafe.Pointer, dst unsafe.Pointer, initVal float32, n int, cfg *config) {
	str := stream()
	k_reducemaxvecdiff2_async(x1, y1, z1, x2, y2, z2, dst, initVal, n, cfg, str)
	syncAndRecycle(str)
}

var reducemaxvecdiff2_map = map[int]string{0: ""}
