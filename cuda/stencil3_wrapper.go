package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/barnex/cuda5/cu"
	"unsafe"
)

var stencil3_code cu.Function

type stencil3_args struct {
	arg_dst   unsafe.Pointer
	arg_src   unsafe.Pointer
	arg_w0    float32
	arg_wt    float32
	arg_wb    float32
	arg_wu    float32
	arg_wd    float32
	arg_wl    float32
	arg_wr    float32
	arg_wrap0 int
	arg_wrap1 int
	arg_wrap2 int
	arg_N0    int
	arg_N1    int
	arg_N2    int
	argptr    [15]unsafe.Pointer
}

// Wrapper for stencil3 CUDA kernel, asynchronous.
func k_stencil3_async(dst unsafe.Pointer, src unsafe.Pointer, w0 float32, wt float32, wb float32, wu float32, wd float32, wl float32, wr float32, wrap0 int, wrap1 int, wrap2 int, N0 int, N1 int, N2 int, cfg *config, str cu.Stream) {
	if stencil3_code == 0 {
		stencil3_code = fatbinLoad(stencil3_map, "stencil3")
	}

	var a stencil3_args

	a.arg_dst = dst
	a.argptr[0] = unsafe.Pointer(&a.arg_dst)
	a.arg_src = src
	a.argptr[1] = unsafe.Pointer(&a.arg_src)
	a.arg_w0 = w0
	a.argptr[2] = unsafe.Pointer(&a.arg_w0)
	a.arg_wt = wt
	a.argptr[3] = unsafe.Pointer(&a.arg_wt)
	a.arg_wb = wb
	a.argptr[4] = unsafe.Pointer(&a.arg_wb)
	a.arg_wu = wu
	a.argptr[5] = unsafe.Pointer(&a.arg_wu)
	a.arg_wd = wd
	a.argptr[6] = unsafe.Pointer(&a.arg_wd)
	a.arg_wl = wl
	a.argptr[7] = unsafe.Pointer(&a.arg_wl)
	a.arg_wr = wr
	a.argptr[8] = unsafe.Pointer(&a.arg_wr)
	a.arg_wrap0 = wrap0
	a.argptr[9] = unsafe.Pointer(&a.arg_wrap0)
	a.arg_wrap1 = wrap1
	a.argptr[10] = unsafe.Pointer(&a.arg_wrap1)
	a.arg_wrap2 = wrap2
	a.argptr[11] = unsafe.Pointer(&a.arg_wrap2)
	a.arg_N0 = N0
	a.argptr[12] = unsafe.Pointer(&a.arg_N0)
	a.arg_N1 = N1
	a.argptr[13] = unsafe.Pointer(&a.arg_N1)
	a.arg_N2 = N2
	a.argptr[14] = unsafe.Pointer(&a.arg_N2)

	args := a.argptr[:]
	cu.LaunchKernel(stencil3_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, str, args)
}

// Wrapper for stencil3 CUDA kernel, synchronized.
func k_stencil3(dst unsafe.Pointer, src unsafe.Pointer, w0 float32, wt float32, wb float32, wu float32, wd float32, wl float32, wr float32, wrap0 int, wrap1 int, wrap2 int, N0 int, N1 int, N2 int, cfg *config) {
	str := stream()
	k_stencil3_async(dst, src, w0, wt, wb, wu, wd, wl, wr, wrap0, wrap1, wrap2, N0, N1, N2, cfg, str)
	syncAndRecycle(str)
}

var stencil3_map = map[int]string{0: ""}
