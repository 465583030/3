package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/barnex/cuda5/cu"
	"unsafe"
)

var normalize_code cu.Function

type normalize_args struct {
	arg_vx   unsafe.Pointer
	arg_vy   unsafe.Pointer
	arg_vz   unsafe.Pointer
	arg_mask unsafe.Pointer
	arg_norm float32
	arg_N    int
	argptr   [6]unsafe.Pointer
}

// Wrapper for normalize CUDA kernel, asynchronous.
func k_normalize_async(vx unsafe.Pointer, vy unsafe.Pointer, vz unsafe.Pointer, mask unsafe.Pointer, norm float32, N int, cfg *config, str cu.Stream) {
	if normalize_code == 0 {
		normalize_code = fatbinLoad(normalize_map, "normalize")
	}

	var a normalize_args

	a.arg_vx = vx
	a.argptr[0] = unsafe.Pointer(&a.arg_vx)
	a.arg_vy = vy
	a.argptr[1] = unsafe.Pointer(&a.arg_vy)
	a.arg_vz = vz
	a.argptr[2] = unsafe.Pointer(&a.arg_vz)
	a.arg_mask = mask
	a.argptr[3] = unsafe.Pointer(&a.arg_mask)
	a.arg_norm = norm
	a.argptr[4] = unsafe.Pointer(&a.arg_norm)
	a.arg_N = N
	a.argptr[5] = unsafe.Pointer(&a.arg_N)

	args := a.argptr[:]
	cu.LaunchKernel(normalize_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, str, args)
}

// Wrapper for normalize CUDA kernel, synchronized.
func k_normalize(vx unsafe.Pointer, vy unsafe.Pointer, vz unsafe.Pointer, mask unsafe.Pointer, norm float32, N int, cfg *config) {
	str := stream()
	k_normalize_async(vx, vy, vz, mask, norm, N, cfg, str)
	syncAndRecycle(str)
}

var normalize_map = map[int]string{0: ""}
