package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/barnex/cuda5/cu"
	"unsafe"
)

var normalize_code cu.Function

type normalize_args struct {
	arg_vx   unsafe.Pointer
	arg_vy   unsafe.Pointer
	arg_vz   unsafe.Pointer
	arg_mask unsafe.Pointer
	arg_norm float32
	arg_N    int
	argptr   [6]unsafe.Pointer
}

// Wrapper for normalize CUDA kernel, asynchronous.
func k_normalize_async(vx unsafe.Pointer, vy unsafe.Pointer, vz unsafe.Pointer, mask unsafe.Pointer, norm float32, N int, cfg *config, str cu.Stream) {
	if normalize_code == 0 {
		normalize_code = cu.ModuleLoadData(normalize_ptx).GetFunction("normalize")
	}

	var a normalize_args

	a.arg_vx = vx
	a.argptr[0] = unsafe.Pointer(&a.arg_vx)
	a.arg_vy = vy
	a.argptr[1] = unsafe.Pointer(&a.arg_vy)
	a.arg_vz = vz
	a.argptr[2] = unsafe.Pointer(&a.arg_vz)
	a.arg_mask = mask
	a.argptr[3] = unsafe.Pointer(&a.arg_mask)
	a.arg_norm = norm
	a.argptr[4] = unsafe.Pointer(&a.arg_norm)
	a.arg_N = N
	a.argptr[5] = unsafe.Pointer(&a.arg_N)

	args := a.argptr[:]
	cu.LaunchKernel(normalize_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, str, args)
}

// Wrapper for normalize CUDA kernel, synchronized.
func k_normalize(vx unsafe.Pointer, vy unsafe.Pointer, vz unsafe.Pointer, mask unsafe.Pointer, norm float32, N int, cfg *config) {
	str := stream()
	k_normalize_async(vx, vy, vz, mask, norm, N, cfg, str)
	syncAndRecycle(str)
}

const normalize_ptx = `
.version 3.0
.target sm_30
.address_size 64


.entry normalize(
	.param .u64 normalize_param_0,
	.param .u64 normalize_param_1,
	.param .u64 normalize_param_2,
	.param .u64 normalize_param_3,
	.param .f32 normalize_param_4,
	.param .u32 normalize_param_5
)
{
	.reg .f32 	%f<25>;
	.reg .pred 	%p<4>;
	.reg .s32 	%r<16>;
	.reg .s64 	%rl<17>;


	ld.param.u64 	%rl10, [normalize_param_0];
	ld.param.u64 	%rl11, [normalize_param_1];
	ld.param.u64 	%rl12, [normalize_param_2];
	ld.param.u64 	%rl1, [normalize_param_3];
	ld.param.u32 	%r2, [normalize_param_5];
	cvta.to.global.u64 	%rl2, %rl1;
	cvta.to.global.u64 	%rl3, %rl12;
	cvta.to.global.u64 	%rl4, %rl11;
	cvta.to.global.u64 	%rl5, %rl10;
	.loc 2 7 1
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	.loc 2 8 1
	setp.lt.s32 	%p1, %r1, %r2;
	@%p1 bra 	BB0_2;

	.loc 2 17 2
	ret;

BB0_2:
	.loc 2 10 1
	cvt.s64.s32 	%rl6, %r1;
	mul.wide.s32 	%rl13, %r1, 4;
	add.s64 	%rl7, %rl5, %rl13;
	ld.global.f32 	%f2, [%rl7];
	add.s64 	%rl8, %rl4, %rl13;
	ld.global.f32 	%f3, [%rl8];
	add.s64 	%rl9, %rl3, %rl13;
	ld.global.f32 	%f4, [%rl9];
	ld.param.u64 	%rl16, [normalize_param_3];
	.loc 2 11 1
	setp.eq.s64 	%p2, %rl16, 0;
	@%p2 bra 	BB0_4;

	shl.b64 	%rl14, %rl6, 2;
	add.s64 	%rl15, %rl2, %rl14;
	ld.global.f32 	%f10, [%rl15];
	ld.param.f32 	%f22, [normalize_param_4];
	.loc 2 11 1
	mul.f32 	%f23, %f10, %f22;
	bra.uni 	BB0_5;

BB0_4:
	ld.param.f32 	%f23, [normalize_param_4];

BB0_5:
	.loc 2 12 1
	mul.f32 	%f11, %f3, %f3;
	fma.rn.f32 	%f12, %f2, %f2, %f11;
	fma.rn.f32 	%f13, %f4, %f4, %f12;
	.loc 3 991 5
	sqrt.rn.f32 	%f7, %f13;
	.loc 2 12 1
	setp.neu.f32 	%p3, %f7, 0f00000000;
	@%p3 bra 	BB0_7;

	mov.f32 	%f24, 0f00000000;
	bra.uni 	BB0_8;

BB0_7:
	.loc 2 12 1
	rcp.rn.f32 	%f24, %f7;

BB0_8:
	mul.f32 	%f15, %f24, %f2;
	mul.f32 	%f16, %f23, %f15;
	mul.f32 	%f17, %f24, %f3;
	mul.f32 	%f18, %f23, %f17;
	mul.f32 	%f19, %f24, %f4;
	mul.f32 	%f20, %f23, %f19;
	.loc 2 13 1
	st.global.f32 	[%rl7], %f16;
	.loc 2 14 1
	st.global.f32 	[%rl8], %f18;
	.loc 2 15 1
	st.global.f32 	[%rl9], %f20;
	.loc 2 17 2
	ret;
}


`
