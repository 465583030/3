package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/barnex/cuda5/cu"
	"unsafe"
)

var normalize_code cu.Function

type normalize_args struct {
	arg_vx  unsafe.Pointer
	arg_vy  unsafe.Pointer
	arg_vz  unsafe.Pointer
	arg_vol unsafe.Pointer
	arg_N   int
	argptr  [5]unsafe.Pointer
}

// Wrapper for normalize CUDA kernel, asynchronous.
func k_normalize_async(vx unsafe.Pointer, vy unsafe.Pointer, vz unsafe.Pointer, vol unsafe.Pointer, N int, cfg *config, str cu.Stream) {
	if normalize_code == 0 {
		normalize_code = fatbinLoad(normalize_map, "normalize")
	}

	var _a_ normalize_args

	_a_.arg_vx = vx
	_a_.argptr[0] = unsafe.Pointer(&_a_.arg_vx)
	_a_.arg_vy = vy
	_a_.argptr[1] = unsafe.Pointer(&_a_.arg_vy)
	_a_.arg_vz = vz
	_a_.argptr[2] = unsafe.Pointer(&_a_.arg_vz)
	_a_.arg_vol = vol
	_a_.argptr[3] = unsafe.Pointer(&_a_.arg_vol)
	_a_.arg_N = N
	_a_.argptr[4] = unsafe.Pointer(&_a_.arg_N)

	args := _a_.argptr[:]
	cu.LaunchKernel(normalize_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, str, args)
}

// Wrapper for normalize CUDA kernel, synchronized.
func k_normalize(vx unsafe.Pointer, vy unsafe.Pointer, vz unsafe.Pointer, vol unsafe.Pointer, N int, cfg *config) {
	str := stream()
	k_normalize_async(vx, vy, vz, vol, N, cfg, str)
	syncAndRecycle(str)
}

var normalize_map = map[int]string{0: "",
	20: normalize_ptx_20,
	30: normalize_ptx_30,
	35: normalize_ptx_35}

const (
	normalize_ptx_20 = `
.version 3.1
.target sm_20
.address_size 64


.visible .entry normalize(
	.param .u64 normalize_param_0,
	.param .u64 normalize_param_1,
	.param .u64 normalize_param_2,
	.param .u64 normalize_param_3,
	.param .u32 normalize_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .s32 	%r<16>;
	.reg .f32 	%f<22>;
	.reg .s64 	%rd<16>;


	ld.param.u64 	%rd10, [normalize_param_0];
	ld.param.u64 	%rd11, [normalize_param_1];
	ld.param.u64 	%rd12, [normalize_param_2];
	ld.param.u64 	%rd9, [normalize_param_3];
	ld.param.u32 	%r2, [normalize_param_4];
	cvta.to.global.u64 	%rd1, %rd12;
	cvta.to.global.u64 	%rd2, %rd11;
	cvta.to.global.u64 	%rd3, %rd10;
	cvta.to.global.u64 	%rd4, %rd9;
	.loc 2 7 1
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	.loc 2 8 1
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	BB0_6;

	.loc 2 10 1
	setp.eq.s64 	%p2, %rd9, 0;
	.loc 2 11 1
	cvt.s64.s32 	%rd5, %r1;
	mov.f32 	%f20, 0f3F800000;
	.loc 2 10 1
	@%p2 bra 	BB0_3;

	shl.b64 	%rd13, %rd5, 2;
	add.s64 	%rd14, %rd4, %rd13;
	ld.global.f32 	%f20, [%rd14];

BB0_3:
	.loc 2 11 1
	mul.wide.s32 	%rd15, %r1, 4;
	add.s64 	%rd6, %rd3, %rd15;
	ld.global.f32 	%f11, [%rd6];
	mul.f32 	%f3, %f20, %f11;
	add.s64 	%rd7, %rd2, %rd15;
	ld.global.f32 	%f12, [%rd7];
	mul.f32 	%f4, %f20, %f12;
	add.s64 	%rd8, %rd1, %rd15;
	ld.global.f32 	%f13, [%rd8];
	mul.f32 	%f5, %f20, %f13;
	.loc 2 12 1
	mul.f32 	%f14, %f4, %f4;
	fma.rn.f32 	%f15, %f3, %f3, %f14;
	fma.rn.f32 	%f16, %f5, %f5, %f15;
	.loc 3 991 5
	sqrt.rn.f32 	%f6, %f16;
	mov.f32 	%f21, 0f00000000;
	.loc 2 12 1
	setp.eq.f32 	%p3, %f6, 0f00000000;
	@%p3 bra 	BB0_5;

	rcp.rn.f32 	%f21, %f6;

BB0_5:
	mul.f32 	%f17, %f21, %f3;
	.loc 2 13 1
	st.global.f32 	[%rd6], %f17;
	.loc 2 12 1
	mul.f32 	%f18, %f21, %f4;
	.loc 2 14 1
	st.global.f32 	[%rd7], %f18;
	.loc 2 12 1
	mul.f32 	%f19, %f21, %f5;
	.loc 2 15 1
	st.global.f32 	[%rd8], %f19;

BB0_6:
	.loc 2 17 2
	ret;
}


`
	normalize_ptx_30 = `
.version 3.1
.target sm_30
.address_size 64


.visible .entry normalize(
	.param .u64 normalize_param_0,
	.param .u64 normalize_param_1,
	.param .u64 normalize_param_2,
	.param .u64 normalize_param_3,
	.param .u32 normalize_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .s32 	%r<16>;
	.reg .f32 	%f<22>;
	.reg .s64 	%rd<16>;


	ld.param.u64 	%rd10, [normalize_param_0];
	ld.param.u64 	%rd11, [normalize_param_1];
	ld.param.u64 	%rd12, [normalize_param_2];
	ld.param.u64 	%rd9, [normalize_param_3];
	ld.param.u32 	%r2, [normalize_param_4];
	cvta.to.global.u64 	%rd1, %rd12;
	cvta.to.global.u64 	%rd2, %rd11;
	cvta.to.global.u64 	%rd3, %rd10;
	cvta.to.global.u64 	%rd4, %rd9;
	.loc 2 7 1
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	.loc 2 8 1
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	BB0_6;

	.loc 2 10 1
	setp.eq.s64 	%p2, %rd9, 0;
	.loc 2 11 1
	cvt.s64.s32 	%rd5, %r1;
	mov.f32 	%f20, 0f3F800000;
	.loc 2 10 1
	@%p2 bra 	BB0_3;

	shl.b64 	%rd13, %rd5, 2;
	add.s64 	%rd14, %rd4, %rd13;
	ld.global.f32 	%f20, [%rd14];

BB0_3:
	.loc 2 11 1
	mul.wide.s32 	%rd15, %r1, 4;
	add.s64 	%rd6, %rd3, %rd15;
	ld.global.f32 	%f11, [%rd6];
	mul.f32 	%f3, %f20, %f11;
	add.s64 	%rd7, %rd2, %rd15;
	ld.global.f32 	%f12, [%rd7];
	mul.f32 	%f4, %f20, %f12;
	add.s64 	%rd8, %rd1, %rd15;
	ld.global.f32 	%f13, [%rd8];
	mul.f32 	%f5, %f20, %f13;
	.loc 2 12 1
	mul.f32 	%f14, %f4, %f4;
	fma.rn.f32 	%f15, %f3, %f3, %f14;
	fma.rn.f32 	%f16, %f5, %f5, %f15;
	.loc 3 991 5
	sqrt.rn.f32 	%f6, %f16;
	mov.f32 	%f21, 0f00000000;
	.loc 2 12 1
	setp.eq.f32 	%p3, %f6, 0f00000000;
	@%p3 bra 	BB0_5;

	rcp.rn.f32 	%f21, %f6;

BB0_5:
	mul.f32 	%f17, %f21, %f3;
	.loc 2 13 1
	st.global.f32 	[%rd6], %f17;
	.loc 2 12 1
	mul.f32 	%f18, %f21, %f4;
	.loc 2 14 1
	st.global.f32 	[%rd7], %f18;
	.loc 2 12 1
	mul.f32 	%f19, %f21, %f5;
	.loc 2 15 1
	st.global.f32 	[%rd8], %f19;

BB0_6:
	.loc 2 17 2
	ret;
}


`
	normalize_ptx_35 = `
.version 3.1
.target sm_35
.address_size 64


.weak .func  (.param .b32 func_retval0) cudaMalloc(
	.param .b64 cudaMalloc_param_0,
	.param .b64 cudaMalloc_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	.loc 2 66 3
	ret;
}

.weak .func  (.param .b32 func_retval0) cudaFuncGetAttributes(
	.param .b64 cudaFuncGetAttributes_param_0,
	.param .b64 cudaFuncGetAttributes_param_1
)
{
	.reg .s32 	%r<2>;


	mov.u32 	%r1, 30;
	st.param.b32	[func_retval0+0], %r1;
	.loc 2 71 3
	ret;
}

.visible .entry normalize(
	.param .u64 normalize_param_0,
	.param .u64 normalize_param_1,
	.param .u64 normalize_param_2,
	.param .u64 normalize_param_3,
	.param .u32 normalize_param_4
)
{
	.reg .pred 	%p<4>;
	.reg .s32 	%r<12>;
	.reg .f32 	%f<22>;
	.reg .s64 	%rd<16>;


	ld.param.u64 	%rd10, [normalize_param_0];
	ld.param.u64 	%rd11, [normalize_param_1];
	ld.param.u64 	%rd12, [normalize_param_2];
	ld.param.u64 	%rd9, [normalize_param_3];
	ld.param.u32 	%r2, [normalize_param_4];
	cvta.to.global.u64 	%rd1, %rd12;
	cvta.to.global.u64 	%rd2, %rd11;
	cvta.to.global.u64 	%rd3, %rd10;
	cvta.to.global.u64 	%rd4, %rd9;
	.loc 3 7 1
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	.loc 3 8 1
	setp.ge.s32 	%p1, %r1, %r2;
	@%p1 bra 	BB2_6;

	.loc 3 10 1
	setp.eq.s64 	%p2, %rd9, 0;
	.loc 3 11 1
	cvt.s64.s32 	%rd5, %r1;
	mov.f32 	%f20, 0f3F800000;
	.loc 3 10 1
	@%p2 bra 	BB2_3;

	shl.b64 	%rd13, %rd5, 2;
	add.s64 	%rd14, %rd4, %rd13;
	ld.global.nc.f32 	%f20, [%rd14];

BB2_3:
	.loc 3 11 1
	mul.wide.s32 	%rd15, %r1, 4;
	add.s64 	%rd6, %rd3, %rd15;
	ld.global.nc.f32 	%f11, [%rd6];
	mul.f32 	%f3, %f20, %f11;
	add.s64 	%rd7, %rd2, %rd15;
	ld.global.nc.f32 	%f12, [%rd7];
	mul.f32 	%f4, %f20, %f12;
	add.s64 	%rd8, %rd1, %rd15;
	ld.global.nc.f32 	%f13, [%rd8];
	mul.f32 	%f5, %f20, %f13;
	.loc 3 12 1
	mul.f32 	%f14, %f4, %f4;
	fma.rn.f32 	%f15, %f3, %f3, %f14;
	fma.rn.f32 	%f16, %f5, %f5, %f15;
	.loc 4 991 5
	sqrt.rn.f32 	%f6, %f16;
	mov.f32 	%f21, 0f00000000;
	.loc 3 12 1
	setp.eq.f32 	%p3, %f6, 0f00000000;
	@%p3 bra 	BB2_5;

	rcp.rn.f32 	%f21, %f6;

BB2_5:
	mul.f32 	%f17, %f21, %f3;
	.loc 3 13 1
	st.global.f32 	[%rd6], %f17;
	.loc 3 12 1
	mul.f32 	%f18, %f21, %f4;
	.loc 3 14 1
	st.global.f32 	[%rd7], %f18;
	.loc 3 12 1
	mul.f32 	%f19, %f21, %f5;
	.loc 3 15 1
	st.global.f32 	[%rd8], %f19;

BB2_6:
	.loc 3 17 2
	ret;
}


`
)
