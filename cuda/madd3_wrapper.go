package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/barnex/cuda5/cu"
	"unsafe"
)

var madd3_code cu.Function

type madd3_args struct {
	arg_dst  unsafe.Pointer
	arg_src1 unsafe.Pointer
	arg_fac1 float32
	arg_src2 unsafe.Pointer
	arg_fac2 float32
	arg_src3 unsafe.Pointer
	arg_fac3 float32
	arg_N    int
	argptr   [8]unsafe.Pointer
}

// Wrapper for madd3 CUDA kernel, asynchronous.
func k_madd3_async(dst unsafe.Pointer, src1 unsafe.Pointer, fac1 float32, src2 unsafe.Pointer, fac2 float32, src3 unsafe.Pointer, fac3 float32, N int, cfg *Config, str cu.Stream) {
	if madd3_code == 0 {
		madd3_code = cu.ModuleLoadData(madd3_ptx).GetFunction("madd3")
	}

	var a madd3_args

	a.arg_dst = dst
	a.argptr[0] = unsafe.Pointer(&a.arg_dst)
	a.arg_src1 = src1
	a.argptr[1] = unsafe.Pointer(&a.arg_src1)
	a.arg_fac1 = fac1
	a.argptr[2] = unsafe.Pointer(&a.arg_fac1)
	a.arg_src2 = src2
	a.argptr[3] = unsafe.Pointer(&a.arg_src2)
	a.arg_fac2 = fac2
	a.argptr[4] = unsafe.Pointer(&a.arg_fac2)
	a.arg_src3 = src3
	a.argptr[5] = unsafe.Pointer(&a.arg_src3)
	a.arg_fac3 = fac3
	a.argptr[6] = unsafe.Pointer(&a.arg_fac3)
	a.arg_N = N
	a.argptr[7] = unsafe.Pointer(&a.arg_N)

	args := a.argptr[:]
	cu.LaunchKernel(madd3_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, str, args)
}

// Wrapper for madd3 CUDA kernel, synchronized.
func k_madd3(dst unsafe.Pointer, src1 unsafe.Pointer, fac1 float32, src2 unsafe.Pointer, fac2 float32, src3 unsafe.Pointer, fac3 float32, N int, cfg *Config) {
	str := stream()
	k_madd3_async(dst, src1, fac1, src2, fac2, src3, fac3, N, cfg, str)
	syncAndRecycle(str)
}

const madd3_ptx = `
.version 3.0
.target sm_30
.address_size 64


.entry madd3(
	.param .u64 madd3_param_0,
	.param .u64 madd3_param_1,
	.param .f32 madd3_param_2,
	.param .u64 madd3_param_3,
	.param .f32 madd3_param_4,
	.param .u64 madd3_param_5,
	.param .f32 madd3_param_6,
	.param .u32 madd3_param_7
)
{
	.reg .f32 	%f<22>;
	.reg .pred 	%p<5>;
	.reg .s32 	%r<13>;
	.reg .s64 	%rl<20>;


	ld.param.u64 	%rl8, [madd3_param_0];
	ld.param.u64 	%rl1, [madd3_param_1];
	ld.param.u64 	%rl2, [madd3_param_3];
	ld.param.u64 	%rl3, [madd3_param_5];
	ld.param.u32 	%r2, [madd3_param_7];
	cvta.to.global.u64 	%rl4, %rl8;
	cvta.to.global.u64 	%rl5, %rl3;
	cvta.to.global.u64 	%rl6, %rl2;
	cvta.to.global.u64 	%rl7, %rl1;
	.loc 2 10 1
	mov.u32 	%r3, %nctaid.x;
	mov.u32 	%r4, %ctaid.y;
	mov.u32 	%r5, %ctaid.x;
	mad.lo.s32 	%r6, %r3, %r4, %r5;
	mov.u32 	%r7, %ntid.x;
	mov.u32 	%r8, %tid.x;
	mad.lo.s32 	%r1, %r6, %r7, %r8;
	.loc 2 12 1
	setp.lt.s32 	%p1, %r1, %r2;
	@%p1 bra 	BB0_2;

	.loc 2 19 2
	ret;

BB0_2:
	ld.param.u64 	%rl17, [madd3_param_1];
	.loc 2 13 1
	setp.eq.s64 	%p2, %rl17, 0;
	@%p2 bra 	BB0_4;

	mul.wide.s32 	%rl9, %r1, 4;
	add.s64 	%rl10, %rl7, %rl9;
	ld.global.f32 	%f19, [%rl10];
	bra.uni 	BB0_5;

BB0_4:
	mov.f32 	%f19, 0f3F800000;

BB0_5:
	ld.param.u64 	%rl18, [madd3_param_3];
	.loc 2 14 1
	setp.eq.s64 	%p3, %rl18, 0;
	@%p3 bra 	BB0_7;

	mul.wide.s32 	%rl11, %r1, 4;
	add.s64 	%rl12, %rl6, %rl11;
	ld.global.f32 	%f20, [%rl12];
	bra.uni 	BB0_8;

BB0_7:
	mov.f32 	%f20, 0f3F800000;

BB0_8:
	ld.param.u64 	%rl19, [madd3_param_5];
	.loc 2 15 1
	setp.eq.s64 	%p4, %rl19, 0;
	@%p4 bra 	BB0_10;

	mul.wide.s32 	%rl13, %r1, 4;
	add.s64 	%rl14, %rl5, %rl13;
	ld.global.f32 	%f21, [%rl14];
	bra.uni 	BB0_11;

BB0_10:
	mov.f32 	%f21, 0f3F800000;

BB0_11:
	ld.param.f32 	%f18, [madd3_param_6];
	.loc 2 16 1
	mul.f32 	%f13, %f21, %f18;
	ld.param.f32 	%f17, [madd3_param_4];
	.loc 2 16 1
	fma.rn.f32 	%f14, %f20, %f17, %f13;
	ld.param.f32 	%f16, [madd3_param_2];
	.loc 2 16 1
	fma.rn.f32 	%f15, %f19, %f16, %f14;
	mul.wide.s32 	%rl15, %r1, 4;
	add.s64 	%rl16, %rl4, %rl15;
	st.global.f32 	[%rl16], %f15;
	.loc 2 19 2
	ret;
}


`
