package cuda

/*
 THIS FILE IS AUTO-GENERATED BY CUDA2GO.
 EDITING IS FUTILE.
*/

import (
	"github.com/barnex/cuda5/cu"
	"unsafe"
)

var kernmulC_code cu.Function

type kernmulC_args struct {
	arg_Mx  unsafe.Pointer
	arg_My  unsafe.Pointer
	arg_Mz  unsafe.Pointer
	arg_Kxx unsafe.Pointer
	arg_Kyy unsafe.Pointer
	arg_Kzz unsafe.Pointer
	arg_Kyz unsafe.Pointer
	arg_Kxz unsafe.Pointer
	arg_Kxy unsafe.Pointer
	arg_Kzy unsafe.Pointer
	arg_Kzx unsafe.Pointer
	arg_Kyx unsafe.Pointer
	arg_N   int
	argptr  [13]unsafe.Pointer
}

// Wrapper for kernmulC CUDA kernel, asynchronous.
func k_kernmulC_async(Mx unsafe.Pointer, My unsafe.Pointer, Mz unsafe.Pointer, Kxx unsafe.Pointer, Kyy unsafe.Pointer, Kzz unsafe.Pointer, Kyz unsafe.Pointer, Kxz unsafe.Pointer, Kxy unsafe.Pointer, Kzy unsafe.Pointer, Kzx unsafe.Pointer, Kyx unsafe.Pointer, N int, cfg *config, str cu.Stream) {
	if kernmulC_code == 0 {
		kernmulC_code = fatbinLoad(kernmulC_map, "kernmulC")
	}

	var a kernmulC_args

	a.arg_Mx = Mx
	a.argptr[0] = unsafe.Pointer(&a.arg_Mx)
	a.arg_My = My
	a.argptr[1] = unsafe.Pointer(&a.arg_My)
	a.arg_Mz = Mz
	a.argptr[2] = unsafe.Pointer(&a.arg_Mz)
	a.arg_Kxx = Kxx
	a.argptr[3] = unsafe.Pointer(&a.arg_Kxx)
	a.arg_Kyy = Kyy
	a.argptr[4] = unsafe.Pointer(&a.arg_Kyy)
	a.arg_Kzz = Kzz
	a.argptr[5] = unsafe.Pointer(&a.arg_Kzz)
	a.arg_Kyz = Kyz
	a.argptr[6] = unsafe.Pointer(&a.arg_Kyz)
	a.arg_Kxz = Kxz
	a.argptr[7] = unsafe.Pointer(&a.arg_Kxz)
	a.arg_Kxy = Kxy
	a.argptr[8] = unsafe.Pointer(&a.arg_Kxy)
	a.arg_Kzy = Kzy
	a.argptr[9] = unsafe.Pointer(&a.arg_Kzy)
	a.arg_Kzx = Kzx
	a.argptr[10] = unsafe.Pointer(&a.arg_Kzx)
	a.arg_Kyx = Kyx
	a.argptr[11] = unsafe.Pointer(&a.arg_Kyx)
	a.arg_N = N
	a.argptr[12] = unsafe.Pointer(&a.arg_N)

	args := a.argptr[:]
	cu.LaunchKernel(kernmulC_code, cfg.Grid.X, cfg.Grid.Y, cfg.Grid.Z, cfg.Block.X, cfg.Block.Y, cfg.Block.Z, 0, str, args)
}

// Wrapper for kernmulC CUDA kernel, synchronized.
func k_kernmulC(Mx unsafe.Pointer, My unsafe.Pointer, Mz unsafe.Pointer, Kxx unsafe.Pointer, Kyy unsafe.Pointer, Kzz unsafe.Pointer, Kyz unsafe.Pointer, Kxz unsafe.Pointer, Kxy unsafe.Pointer, Kzy unsafe.Pointer, Kzx unsafe.Pointer, Kyx unsafe.Pointer, N int, cfg *config) {
	str := stream()
	k_kernmulC_async(Mx, My, Mz, Kxx, Kyy, Kzz, Kyz, Kxz, Kxy, Kzy, Kzx, Kyx, N, cfg, str)
	syncAndRecycle(str)
}

var kernmulC_map = map[int]string{0: ""}
